{

    // Whether or not the plugin is enabled. Useful if you want to disable
    // the plugin completely for a specific project.
    "enabled": true,

    // Whether or not to automatically trigger the auto complete
    // window when typing object., object-> or similar.
    "automatic_completion_popup": true,

    // Number of worker threads to create. If set to -1 it'll create
    // one thread per cpu
    "worker_threadcount": -1,

    // Whether or not fast completions are enabled. Usually you'd put
    // "sublimeclang_enable_fast_completions": false, in the project
    // settings if it's problematic in that project. You can also
    // runtime toggle fast completions alt+d,alt+f, however if it
    // is disabled for the current project (or globally in your
    // user settings) it will not be enabled. In other words
    // this setting, when set to false, overrides whatever the
    // keyboard toggle is set to.
    "enable_fast_completions": true,


    // Whether or not to hide the clang output panel when it's empty
    "hide_output_when_empty": false,

    // Whether or not to automatically show the output panel.
    // If set to false, the default key-binding alt+d,alt+p
    // will show it
    "show_output_panel": true,

    // When set to true, the output panel will be updated with the active
    // view's errors/warnings as it is switched to. If set to false you will
    // have to switch to the view you want to get the errors/warnings for
    // and press alt+d,alt+f to hide and then display the panel for it
    // to refresh its contents
    "update_output_panel": true,


    // Whether or not to show the clang parser status in the status bar
    "show_status": true,


    // When set to true, error marks will only be displayed when the error
    // panel is showing
    "error_marks_on_panel_only": false,

    // This is the bitmask sent to index.parse.
    // For example, to be able to go to the definition of
    // preprocessed macros, set it to 1, for using an implicit
    // precompiled header set it to 4 and for caching completion
    // results, set it to 8. Or all together 1+4+8=13.
    //
    // See http://clang.llvm.org/doxygen/group__CINDEX__TRANSLATION__UNIT.html#gab1e4965c1ebe8e41d71e90203a723fe9
    // and http://clang.llvm.org/doxygen/Index_8h_source.html
    // for more details
    "index_parse_options": 13,

    // If set to false, the main thread will lock while parsing
    // the file, but commands will work the first time they are
    // executed rather than the first time after warm up has
    // finished
    "warm_up_in_separate_thread": true,

    // If set to true will warm up the cache for supported files
    // when they are opened
    "cache_on_load": true,

    // If set to true will remove the file from the cache when
    // it is closed
    "remove_on_close": true,

    // If set to true will pop the file from the navigation stack
    // (automatic alt+d,alt+b) when the file is closed
    "pop_on_close": true,

    // set to true to compile the file when the window is focused.
    "reparse_on_focus": true,

    // set true to compile the file when the file is saved.
    "reparse_on_save": true,

    // set true to compile the file on the fly whenever it's modified
    "reparse_on_edit": false,

    // Whether to use the saved file or the (possibly) dirty buffer contents when reparsing
    "reparse_use_dirty_buffer": false,

    // When set to true will display parse status messages
    "parse_status_messages": true,

    // When set to true will display analyzer status messages
    "analyzer_status_messages": true,

    // Scope used for markers in the clang output panel
    "marker_output_panel_scope": "invalid",

    // Scope used for warning markers
    "marker_warning_scope": "comment",

    // Scope used for error markers
    "marker_error_scope": "invalid",

    // Whether or not to print out timing information for the complete operation
    "time_completions": false,

    // Whether or not to inhibit the Sublime Text 2 built in word completions
    "inhibit_sublime_completions": true,

    // Don't show stuff in the autocomplete list when the name starts with the following
    "dont_complete_startswith":
    [
        "~",
        "operator"
    ],

    // If set to true it'll add for example "-x c++" to the options for c++ files
    "add_language_option": true,

    // Additional language specific options for clang.
    // This option only works when "add_language_option" is set to true.
    "additional_language_options":
    {
        // For example, you can use "c++": ["-std=c++11"] to enable C++11 features.
        "c++" : ["-Wall"],
        "c"   : ["-Wall"]
    },

    // system wide settings for SublimeClang,
    // very cryptic, run your clang with the following command
    // $ clang++ -### -c hello.cpp
    // and you should get a bunch of parameters that the clang driver
    // feeds to the frontend (cc1)
    // copy the ones called -internal-isystem and remove the -internal
    // part and then put them here.
    // TODO: solve this and make this automatic somehow
    // "options":
    // [
    //     "-isystem", "/usr/bin/../lib64/gcc/x86_64-unknown-linux-gnu/5.3.0/../../../../include/c++/5.3.0",
    //     "-isystem", "/usr/bin/../lib64/gcc/x86_64-unknown-linux-gnu/5.3.0/../../../../include/c++/5.3.0/x86_64-unknown-linux-gnu",
    //     "-isystem", "/usr/bin/../lib64/gcc/x86_64-unknown-linux-gnu/5.3.0/../../../../include/c++/5.3.0/backward",
    //     "-isystem", "/usr/local/include",
    //     "-isystem", "/usr/bin/../lib/clang/3.7.1/include",
    //     "-Wall"
    // ],

    "system_include_paths":
    [
    "/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8",
    "/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/x86_64-linux-gnu/c++/4.8",
    "/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/x86_64-linux-gnu/c++/4.8",
    "/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/backward",
    "/usr/local/include",
    "/home/svaisanen/bin/clang-3.7.1/bin/../lib/clang/3.7.1/include"
    ],

    "options":
    [
    "-isystem", "/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8",
    "-isystem", "/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/x86_64-linux-gnu/c++/4.8",
    "-isystem", "/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/x86_64-linux-gnu/c++/4.8",
    "-isystem", "/usr/lib/gcc/x86_64-linux-gnu/4.8/../../../../include/c++/4.8/backward",
    "-isystem", "/usr/local/include",
    "-isystem", "/home/svaisanen/bin/clang-3.7.1/bin/../lib/clang/3.7.1/include",
    "-Wall"
    ],


    // When set to true will output the final options used to the python console
    "debug_options": false,

    // Scope used for markers in the clang output panel
    "marker_analyzer_output_panel_scope": "invalid",

    // Scope used for markers by the analyzer in the file views
    "marker_analyzer_scope": "invalid",

    // Command line used to invoke the static analyzer.
    // "options" will be appended to this
    "analyzer_commandline":
    [
        "clang",
        "--analyze",
        "-o",
        "-"
    ],

    // Extensions to be scanned by the static analyzer
    // when analyzing a project
    "analyzer_extensions":
    [
        "cpp",
        "c",
        "cc",
        "m",
        "mm"
    ],

    // All diagnostic errors from files in these directories or below will be ignored
    "diagnostic_ignore_dirs":
    [
    ],

    // Diagnostic errors/warnings matching this regex pattern will be ignored
    "diagnostic_ignore_regex": "pragma once in main file"
}
